/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { UserInterest } from "./UserInterest";
import { UserInterestCountArgs } from "./UserInterestCountArgs";
import { UserInterestFindManyArgs } from "./UserInterestFindManyArgs";
import { UserInterestFindUniqueArgs } from "./UserInterestFindUniqueArgs";
import { CreateUserInterestArgs } from "./CreateUserInterestArgs";
import { UpdateUserInterestArgs } from "./UpdateUserInterestArgs";
import { DeleteUserInterestArgs } from "./DeleteUserInterestArgs";
import { Event } from "../../event/base/Event";
import { Profile } from "../../profile/base/Profile";
import { UserInterestService } from "../userInterest.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserInterest)
export class UserInterestResolverBase {
  constructor(
    protected readonly service: UserInterestService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserInterest",
    action: "read",
    possession: "any",
  })
  async _userInterestsMeta(
    @graphql.Args() args: UserInterestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserInterest])
  @nestAccessControl.UseRoles({
    resource: "UserInterest",
    action: "read",
    possession: "any",
  })
  async userInterests(
    @graphql.Args() args: UserInterestFindManyArgs
  ): Promise<UserInterest[]> {
    return this.service.userInterests(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserInterest, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserInterest",
    action: "read",
    possession: "own",
  })
  async userInterest(
    @graphql.Args() args: UserInterestFindUniqueArgs
  ): Promise<UserInterest | null> {
    const result = await this.service.userInterest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserInterest)
  @nestAccessControl.UseRoles({
    resource: "UserInterest",
    action: "create",
    possession: "any",
  })
  async createUserInterest(
    @graphql.Args() args: CreateUserInterestArgs
  ): Promise<UserInterest> {
    return await this.service.createUserInterest({
      ...args,
      data: {
        ...args.data,

        event: args.data.event
          ? {
              connect: args.data.event,
            }
          : undefined,

        profile: args.data.profile
          ? {
              connect: args.data.profile,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserInterest)
  @nestAccessControl.UseRoles({
    resource: "UserInterest",
    action: "update",
    possession: "any",
  })
  async updateUserInterest(
    @graphql.Args() args: UpdateUserInterestArgs
  ): Promise<UserInterest | null> {
    try {
      return await this.service.updateUserInterest({
        ...args,
        data: {
          ...args.data,

          event: args.data.event
            ? {
                connect: args.data.event,
              }
            : undefined,

          profile: args.data.profile
            ? {
                connect: args.data.profile,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserInterest)
  @nestAccessControl.UseRoles({
    resource: "UserInterest",
    action: "delete",
    possession: "any",
  })
  async deleteUserInterest(
    @graphql.Args() args: DeleteUserInterestArgs
  ): Promise<UserInterest | null> {
    try {
      return await this.service.deleteUserInterest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Event, {
    nullable: true,
    name: "event",
  })
  @nestAccessControl.UseRoles({
    resource: "Event",
    action: "read",
    possession: "any",
  })
  async getEvent(
    @graphql.Parent() parent: UserInterest
  ): Promise<Event | null> {
    const result = await this.service.getEvent(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Profile, {
    nullable: true,
    name: "profile",
  })
  @nestAccessControl.UseRoles({
    resource: "Profile",
    action: "read",
    possession: "any",
  })
  async getProfile(
    @graphql.Parent() parent: UserInterest
  ): Promise<Profile | null> {
    const result = await this.service.getProfile(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
